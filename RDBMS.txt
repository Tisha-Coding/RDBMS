
                                                                          RDBMS Assignment

Q1. What is RDBMS? Why do industries use RDBMS?
An RDBMS (Relational Database Management System) is a type of database management system based on the relational model, where data is stored in the form of tables (relations). Each table consists of rows (tuples) and columns (attributes). RDBMSs are used to manage, update, and query relational databases.

Key Features:
Structured Data: Data is organized into tables, and relationships between tables can be established using foreign keys.
SQL: Provides a standardized language (SQL) for querying and manipulating the data.
Data Integrity: Ensures data consistency through rules, constraints, and normalization.
Why Industries Use RDBMS:
Data Integrity: RDBMSs maintain data integrity through constraints like primary keys, foreign keys, and unique constraints.
Scalability: RDBMSs can efficiently manage large amounts of data, which can scale as the business grows.
Security: Fine-grained access control ensures that only authorized users can access specific data.
Efficient Data Retrieval: SQL queries allow efficient data retrieval and management, supporting complex queries, aggregations, and joins.
ACID Properties: RDBMSs ensure atomicity, consistency, isolation, and durability of transactions, which is critical for business applications.
Popular RDBMS: MySQL, PostgreSQL, Oracle, Microsoft SQL Server.

Q2. Explain the Relational Data Model in Depth
The Relational Data Model organizes data into relations (tables) composed of rows and columns. It follows these basic principles:

Table (Relation): Represents an entity or a real-world object (e.g., Customers, Orders, Products). Each table consists of rows (records) and columns (attributes).
Rows (Tuples): Each row represents a single record in the table.
Columns (Attributes): Each column represents a characteristic or property of the entity (e.g., a Customer table might have columns like CustomerID, Name, Email).
Primary Key: Uniquely identifies each record in a table.
Foreign Key: Links two tables by establishing a relationship between them. It refers to the primary key in another table.
Example:
Consider an Orders table:

OrderID	CustomerID	ProductID	Quantity
101	1	2001	2
102	2	2002	1

Here, CustomerID is a foreign key that links to the Customer table, establishing a relationship between orders and customers.

Q3. Importance of Relationships in a Database Management System (DBMS)
Relationships in a DBMS define how tables (entities) are related to each other. They are crucial for structuring data and ensuring data consistency and integrity. Relationships enable efficient querying of related data and help prevent redundancy.

Types of Relationships:
One-to-One (1:1):

Each record in one table corresponds to one record in another table.
Example: A person and their unique passport.
One-to-Many (1:N):

A record in one table can be related to multiple records in another table.
Example: A customer can place multiple orders (one customer, many orders).
Many-to-Many (M:N):

Multiple records in one table are related to multiple records in another table.
Example: Students and courses (many students can enroll in many courses).
Self-Referencing:

A table has a relationship with itself.
Example: An employee can report to another employee (hierarchical structure).

Q4. Different Types of Keys in RDBMS (Real-Life Scenario)
Primary Key: Uniquely identifies a record in a table.

Example: In a "Customers" table, CustomerID is the primary key.
Foreign Key: Establishes a relationship between two tables.

Example: OrderID in an "Orders" table is linked to CustomerID in the "Customers" table.
Candidate Key: Any key that can serve as a primary key.

Example: In a "Students" table, both StudentID and Email could be candidate keys since both uniquely identify a student.
Alternate Key: A candidate key not chosen as the primary key.

Example: If StudentID is the primary key, Email is an alternate key.
Composite Key: A primary key composed of more than one attribute.

Example: In a "CourseRegistrations" table, a combination of StudentID and CourseID forms the composite key.
Super Key: A set of attributes that uniquely identifies a record. It can include extra attributes beyond what is necessary.

Example: CustomerID + Email can be a super key.

Q5. Single Responsibility Principle (SRP)
The Single Responsibility Principle (SRP) is a concept from software engineering, part of the SOLID principles. It states that every class or module should have only one responsibility or reason to change. In other words, a class should only have one job.

Example:
Consider a class User. If it handles both user authentication and user profile updates, it violates SRP. Instead, you should split it into two classes: AuthManager for authentication and UserProfile for handling profile updates.

Q6. Errors in a Denormalized Database
Denormalization refers to the process of deliberately introducing redundancy into a database to optimize read performance, which can lead to various issues:

Data Redundancy: Duplicated data increases storage requirements and maintenance overhead.
Data Inconsistency: Multiple copies of the same data can lead to inconsistent values when one is updated and the other is not.
Update Anomalies: Changes must be made in several places, increasing the chances of error.
Insert Anomalies: Inserting data can be difficult if some columns are unrelated but forced together due to denormalization.
Delete Anomalies: Deleting a record might accidentally remove critical data shared with other records.

Q7. What is Normalization? Why is it Needed?
Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity. It breaks data into smaller, related tables and establishes relationships between them.

Need for Normalization:
Eliminate Redundancy: Avoids unnecessary duplication of data.
Improve Data Integrity: Ensures consistency and accuracy of data.
Efficient Data Updates: Reduces anomalies during data modification.
Storage Efficiency: Optimizes space by storing each piece of data only once.

Q8. Levels of Normalization
First Normal Form (1NF):

Ensures no repeating groups and that each column contains atomic values.
Example: Splitting multiple phone numbers in one column into separate rows.
Second Normal Form (2NF):

Achieves 1NF and ensures that all non-key attributes are fully dependent on the primary key.
Example: Removing partial dependencies (where one attribute depends only on part of a composite key).
Third Normal Form (3NF):

Achieves 2NF and ensures no transitive dependencies (attributes dependent on other non-key attributes).
Example: Removing attributes like DepartmentName from an Employee table and placing it in a separate Departments table.
Boyce-Codd Normal Form (BCNF):

A stronger version of 3NF, ensuring that for every functional dependency, the left side is a super key.
Fourth Normal Form (4NF):

Ensures no multivalued dependencies.

Q9. What are Joins? Why Do We Need Them?
Joins in SQL are used to combine rows from two or more tables based on a related column between them. Joins are needed when you want to retrieve data spread across multiple tables.

Example:
If you have a Customers table and an Orders table, you can use a join to retrieve all orders placed by a specific customer.

Q10. Types of Joins
Inner Join:

Returns only matching rows between two tables.
Example: Retrieve customers who have placed at least one order.
Left (Outer) Join:

Returns all rows from the left table and matching rows from the right table. Non-matching rows are filled with NULL.
Example: Retrieve all customers and their orders, even those who haven’t placed any.
Right (Outer) Join:

Returns all rows from the right table and matching rows from the left table.
Example: Retrieve all products and orders, even if some products haven’t been ordered.
Full (Outer) Join:

Returns all rows when there is a match in either table.
Example: Retrieve all customers and all orders





